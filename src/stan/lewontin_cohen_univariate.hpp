// Code generated by stanc v2.36.0
#include <stan/model/model_header.hpp>
namespace x39lewontin_cohen_univariate_modelx39_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 44> locations_array__ =
  {" (found before start of program)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 49, column 2 to column 10)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 50, column 2 to column 21)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 51, column 2 to column 21)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 54, column 2 to column 9)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 55, column 2 to column 27)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 62, column 2 to column 21)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 65, column 2 to column 24)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 66, column 2 to column 24)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 67, column 2 to column 20)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 75, column 2 to column 21)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 79, column 2 to line 80, column 53)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 40, column 2 to column 8)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 41, column 2 to column 8)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 42, column 8 to column 9)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 42, column 2 to column 36)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 43, column 9 to column 10)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 43, column 12 to column 13)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 43, column 2 to column 18)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 44, column 2 to column 25)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 15, column 4 to column 26)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 16, column 11 to column 12)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 16, column 4 to column 23)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 17, column 11 to column 12)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 17, column 4 to column 21)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 18, column 11 to column 12)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 18, column 14 to column 15)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 18, column 4 to column 42)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 19, column 4 to column 11)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 20, column 4 to column 11)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 24, column 6 to column 30)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 28, column 8 to column 27)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 27, column 13 to line 29, column 7)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 26, column 8 to column 27)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 25, column 17 to line 27, column 7)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 25, column 6 to line 29, column 7)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 30, column 6 to column 29)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 23, column 17 to line 31, column 5)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 23, column 4 to line 31, column 5)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 32, column 4 to column 31)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 22, column 17 to line 33, column 3)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 22, column 4 to line 33, column 3)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 35, column 4 to column 68)",
  " (in 'C:\\Users\\alrob\\AppData\\Local\\Temp\\RtmpWa86sf\\model-ad05d562f47.stan', line 12, column 32 to line 36, column 3)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T8__, typename T9__,
          stan::require_all_t<stan::is_std_vector<T0__>,
                              std::is_integral<stan::value_type_t<T0__>>,
                              std::is_integral<T1__>, std::is_integral<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              std::is_integral<T4__>,
                              stan::math::disjunction<stan::is_autodiff<T5__>,
                                                      std::is_floating_point<T5__>>,
                              stan::math::disjunction<stan::is_autodiff<T6__>,
                                                      std::is_floating_point<T6__>>,
                              stan::math::disjunction<stan::is_autodiff<T7__>,
                                                      std::is_floating_point<T7__>>,
                              stan::math::disjunction<stan::is_autodiff<T8__>,
                                                      std::is_floating_point<T8__>>,
                              stan::math::disjunction<stan::is_autodiff<T9__>,
                                                      std::is_floating_point<T9__>>>* = nullptr>
stan::promote_args_t<stan::base_type_t<T3__>, T5__, T6__, T7__, T8__,
  stan::promote_args_t<T9__>>
partial_sum_lpmf(const T0__& slice_n_occ, const T1__& start, const T2__& end,
                 const T3__& ts_arg__, const T4__& N, const T5__& mu,
                 const T6__& sigl, const T7__& sigr, const T8__& pd,
                 const T9__& c, std::ostream* pstream__);
template <bool propto__>
struct partial_sum_lpmf_rsfunctor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, typename T5__, typename T6__, typename T7__,
            typename T8__, typename T9__,
            stan::require_all_t<stan::is_std_vector<T0__>,
                                std::is_integral<stan::value_type_t<T0__>>,
                                std::is_integral<T1__>,
                                std::is_integral<T2__>,
                                stan::is_eigen_matrix_dynamic<T3__>,
                                stan::is_vt_not_complex<T3__>,
                                std::is_integral<T4__>,
                                stan::math::disjunction<stan::is_autodiff<T5__>,
                                                        std::is_floating_point<T5__>>,
                                stan::math::disjunction<stan::is_autodiff<T6__>,
                                                        std::is_floating_point<T6__>>,
                                stan::math::disjunction<stan::is_autodiff<T7__>,
                                                        std::is_floating_point<T7__>>,
                                stan::math::disjunction<stan::is_autodiff<T8__>,
                                                        std::is_floating_point<T8__>>,
                                stan::math::disjunction<stan::is_autodiff<T9__>,
                                                        std::is_floating_point<T9__>>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T3__>, T5__, T6__, T7__, T8__,
    stan::promote_args_t<T9__>>
  operator()(const T0__& slice_n_occ, const T1__& start, const T2__& end,
             std::ostream* pstream__, const T3__& ts, const T4__& N,
             const T5__& mu, const T6__& sigl, const T7__& sigr, const T8__&
             pd, const T9__& c) const {
    return partial_sum_lpmf<propto__>(slice_n_occ, (start + 1), (end + 1),
             ts, N, mu, sigl, sigr, pd, c, pstream__);
  }
};
/* real
   partial_sum_lpmf(array[] int, int, int, matrix, int, real, real, real, 
                    real, real)
 */
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T8__, typename T9__,
          stan::require_all_t<stan::is_std_vector<T0__>,
                              std::is_integral<stan::value_type_t<T0__>>,
                              std::is_integral<T1__>, std::is_integral<T2__>,
                              stan::is_eigen_matrix_dynamic<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              std::is_integral<T4__>,
                              stan::math::disjunction<stan::is_autodiff<T5__>,
                                                      std::is_floating_point<T5__>>,
                              stan::math::disjunction<stan::is_autodiff<T6__>,
                                                      std::is_floating_point<T6__>>,
                              stan::math::disjunction<stan::is_autodiff<T7__>,
                                                      std::is_floating_point<T7__>>,
                              stan::math::disjunction<stan::is_autodiff<T8__>,
                                                      std::is_floating_point<T8__>>,
                              stan::math::disjunction<stan::is_autodiff<T9__>,
                                                      std::is_floating_point<T9__>>>*>
stan::promote_args_t<stan::base_type_t<T3__>, T5__, T6__, T7__, T8__,
  stan::promote_args_t<T9__>>
partial_sum_lpmf(const T0__& slice_n_occ, const T1__& start, const T2__& end,
                 const T3__& ts_arg__, const T4__& N, const T5__& mu,
                 const T6__& sigl, const T7__& sigr, const T8__& pd,
                 const T9__& c, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T3__>,
                             T5__, T6__, T7__, T8__,
                             stan::promote_args_t<T9__>>;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  const auto& ts = stan::math::to_ref(ts_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int M = std::numeric_limits<int>::min();
    current_statement__ = 20;
    M = ((end - start) + 1);
    current_statement__ = 21;
    stan::math::validate_non_negative_index("response", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,1> response =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
    current_statement__ = 23;
    stan::math::validate_non_negative_index("loglam", "M", M);
    Eigen::Matrix<local_scalar_t__,-1,1> loglam =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
    current_statement__ = 25;
    stan::math::validate_non_negative_index("ts_slice", "M", M);
    current_statement__ = 26;
    stan::math::validate_non_negative_index("ts_slice", "N", N);
    Eigen::Matrix<local_scalar_t__,-1,-1> ts_slice =
      Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(M, N, DUMMY_VAR__);
    current_statement__ = 27;
    stan::model::assign(ts_slice,
      stan::model::rvalue(ts, "ts", stan::model::index_min_max(start, end)),
      "assigning variable ts_slice");
    local_scalar_t__ u = DUMMY_VAR__;
    local_scalar_t__ v = DUMMY_VAR__;
    current_statement__ = 41;
    for (int i = 1; i <= M; ++i) {
      current_statement__ = 38;
      for (int j = 1; j <= N; ++j) {
        current_statement__ = 30;
        u = (stan::model::rvalue(ts_slice, "ts_slice",
               stan::model::index_uni(i), stan::model::index_uni(j))
          - mu);
        current_statement__ = 35;
        if (stan::math::logical_lt(u, 0)) {
          current_statement__ = 33;
          v = stan::math::pow((u / sigl), 2);
        } else {
          current_statement__ = 31;
          v = stan::math::pow((u / sigr), 2);
        }
        current_statement__ = 36;
        stan::model::assign(response, (-(0.5) * v),
          "assigning variable response", stan::model::index_uni(j));
      }
      current_statement__ = 39;
      stan::model::assign(loglam, stan::math::mean(response),
        "assigning variable loglam", stan::model::index_uni(i));
    }
    current_statement__ = 42;
    return stan::math::bernoulli_lpmf<false>(slice_n_occ,
             stan::math::multiply(pd,
               stan::math::inv_logit(stan::math::subtract(loglam, c))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class x39lewontin_cohen_univariate_modelx39 final : public model_base_crtp<x39lewontin_cohen_univariate_modelx39> {
 private:
  int M;
  int N;
  std::vector<int> occ;
  Eigen::Matrix<double,-1,-1> ts_data__;
  int grainsize;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> ts{nullptr, 0, 0};
 public:
  ~x39lewontin_cohen_univariate_modelx39() {}
  x39lewontin_cohen_univariate_modelx39(stan::io::var_context& context__,
                                        unsigned int random_seed__ = 0,
                                        std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    auto base_rng__ = stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "x39lewontin_cohen_univariate_modelx39_namespace::x39lewontin_cohen_univariate_modelx39";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 12;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 12;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 13;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 13;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 14;
      stan::math::validate_non_negative_index("occ", "M", M);
      current_statement__ = 15;
      context__.validate_dims("data initialization", "occ", "int",
        std::vector<size_t>{static_cast<size_t>(M)});
      occ = std::vector<int>(M, std::numeric_limits<int>::min());
      current_statement__ = 15;
      occ = context__.vals_i("occ");
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "occ", occ, 0);
      current_statement__ = 15;
      stan::math::check_less_or_equal(function__, "occ", occ, 1);
      current_statement__ = 16;
      stan::math::validate_non_negative_index("ts", "M", M);
      current_statement__ = 17;
      stan::math::validate_non_negative_index("ts", "N", N);
      current_statement__ = 18;
      context__.validate_dims("data initialization", "ts", "double",
        std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(N)});
      ts_data__ = Eigen::Matrix<double,-1,-1>::Constant(M, N,
                    std::numeric_limits<double>::quiet_NaN());
      new (&ts) Eigen::Map<Eigen::Matrix<double,-1,-1>>(ts_data__.data(), M,
        N);
      {
        std::vector<local_scalar_t__> ts_flat__;
        current_statement__ = 18;
        ts_flat__ = context__.vals_r("ts");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            stan::model::assign(ts, ts_flat__[(pos__ - 1)],
              "assigning variable ts", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 19;
      context__.validate_dims("data initialization", "grainsize", "int",
        std::vector<size_t>{});
      grainsize = std::numeric_limits<int>::min();
      current_statement__ = 19;
      grainsize = context__.vals_i("grainsize")[(1 - 1)];
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "grainsize", grainsize,
        1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "x39lewontin_cohen_univariate_modelx39";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.36.0",
             "stancflags = --name='lewontin_cohen_univariate_model'"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "x39lewontin_cohen_univariate_modelx39_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto mu = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      auto sigl =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 3;
      auto sigr =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 4;
      auto c = in__.template read<local_scalar_t__>();
      current_statement__ = 5;
      auto pd =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      {
        current_statement__ = 6;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu, 0, 10));
        current_statement__ = 7;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(sigl, 1));
        current_statement__ = 8;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(sigr, 1));
        current_statement__ = 9;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(c, 0, 10));
        current_statement__ = 10;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(pd, 0, 1));
        current_statement__ = 11;
        lp_accum__.add(stan::math::reduce_sum<partial_sum_lpmf_rsfunctor__<propto__>>(
                         occ, grainsize, pstream__, ts, N, mu, sigl, sigr,
                         pd, c));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "x39lewontin_cohen_univariate_modelx39_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto mu = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      auto sigl =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 3;
      auto sigr =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 4;
      auto c = in__.template read<local_scalar_t__>();
      current_statement__ = 5;
      auto pd =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      {
        current_statement__ = 6;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu, 0, 10));
        current_statement__ = 7;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(sigl, 1));
        current_statement__ = 8;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(sigr, 1));
        current_statement__ = 9;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(c, 0, 10));
        current_statement__ = 10;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(pd, 0, 1));
        current_statement__ = 11;
        lp_accum__.add(stan::math::reduce_sum<partial_sum_lpmf_rsfunctor__<propto__>>(
                         occ, grainsize, pstream__, ts, N, mu, sigl, sigr,
                         pd, c));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "x39lewontin_cohen_univariate_modelx39_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto mu = in__.template read<local_scalar_t__>();
      current_statement__ = 2;
      auto sigl =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 3;
      auto sigr =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 4;
      auto c = in__.template read<local_scalar_t__>();
      current_statement__ = 5;
      auto pd =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      out__.write(mu);
      out__.write(sigl);
      out__.write(sigr);
      out__.write(c);
      out__.write(pd);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 1;
      mu = in__.read<local_scalar_t__>();
      out__.write(mu);
      local_scalar_t__ sigl = DUMMY_VAR__;
      current_statement__ = 2;
      sigl = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigl);
      local_scalar_t__ sigr = DUMMY_VAR__;
      current_statement__ = 3;
      sigr = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigr);
      local_scalar_t__ c = DUMMY_VAR__;
      current_statement__ = 4;
      c = in__.read<local_scalar_t__>();
      out__.write(c);
      local_scalar_t__ pd = DUMMY_VAR__;
      current_statement__ = 5;
      pd = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, pd);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "mu", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "sigl", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "sigr", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "c", "double",
        std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "pd", "double",
        std::vector<size_t>{});
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 1;
      mu = context__.vals_r("mu")[(1 - 1)];
      out__.write(mu);
      local_scalar_t__ sigl = DUMMY_VAR__;
      current_statement__ = 2;
      sigl = context__.vals_r("sigl")[(1 - 1)];
      out__.write_free_lb(0, sigl);
      local_scalar_t__ sigr = DUMMY_VAR__;
      current_statement__ = 3;
      sigr = context__.vals_r("sigr")[(1 - 1)];
      out__.write_free_lb(0, sigr);
      local_scalar_t__ c = DUMMY_VAR__;
      current_statement__ = 4;
      c = context__.vals_r("c")[(1 - 1)];
      out__.write(c);
      local_scalar_t__ pd = DUMMY_VAR__;
      current_statement__ = 5;
      pd = context__.vals_r("pd")[(1 - 1)];
      out__.write_free_lub(0, 1, pd);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"mu", "sigl", "sigr", "c", "pd"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "sigl");
    param_names__.emplace_back(std::string() + "sigr");
    param_names__.emplace_back(std::string() + "c");
    param_names__.emplace_back(std::string() + "pd");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "sigl");
    param_names__.emplace_back(std::string() + "sigr");
    param_names__.emplace_back(std::string() + "c");
    param_names__.emplace_back(std::string() + "pd");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigl\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigr\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigl\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigr\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((1 + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((1 + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = x39lewontin_cohen_univariate_modelx39_namespace::x39lewontin_cohen_univariate_modelx39;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return x39lewontin_cohen_univariate_modelx39_namespace::profiles__;
}
#endif
