// Generated by rstantools.  Do not edit by hand.

/*
    xsdm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    xsdm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with xsdm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_lewontin_cohen_univariate_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 59> locations_array__ =
  {" (found before start of program)",
  " (in 'lewontin_cohen_univariate', line 9, column 2 to column 10)",
  " (in 'lewontin_cohen_univariate', line 10, column 2 to column 21)",
  " (in 'lewontin_cohen_univariate', line 11, column 2 to column 21)",
  " (in 'lewontin_cohen_univariate', line 14, column 2 to column 9)",
  " (in 'lewontin_cohen_univariate', line 15, column 2 to column 27)",
  " (in 'lewontin_cohen_univariate', line 45, column 2 to column 20)",
  " (in 'lewontin_cohen_univariate', line 47, column 11 to column 12)",
  " (in 'lewontin_cohen_univariate', line 47, column 4 to column 23)",
  " (in 'lewontin_cohen_univariate', line 48, column 11 to column 12)",
  " (in 'lewontin_cohen_univariate', line 48, column 4 to column 21)",
  " (in 'lewontin_cohen_univariate', line 49, column 4 to column 11)",
  " (in 'lewontin_cohen_univariate', line 50, column 4 to column 11)",
  " (in 'lewontin_cohen_univariate', line 55, column 8 to column 26)",
  " (in 'lewontin_cohen_univariate', line 59, column 10 to column 29)",
  " (in 'lewontin_cohen_univariate', line 58, column 15 to line 60, column 9)",
  " (in 'lewontin_cohen_univariate', line 57, column 10 to column 29)",
  " (in 'lewontin_cohen_univariate', line 56, column 19 to line 58, column 9)",
  " (in 'lewontin_cohen_univariate', line 56, column 8 to line 60, column 9)",
  " (in 'lewontin_cohen_univariate', line 61, column 8 to column 31)",
  " (in 'lewontin_cohen_univariate', line 54, column 19 to line 62, column 7)",
  " (in 'lewontin_cohen_univariate', line 54, column 6 to line 62, column 7)",
  " (in 'lewontin_cohen_univariate', line 63, column 6 to column 33)",
  " (in 'lewontin_cohen_univariate', line 64, column 6 to column 74)",
  " (in 'lewontin_cohen_univariate', line 53, column 17 to line 65, column 5)",
  " (in 'lewontin_cohen_univariate', line 53, column 4 to line 65, column 5)",
  " (in 'lewontin_cohen_univariate', line 45, column 20 to line 66, column 3)",
  " (in 'lewontin_cohen_univariate', line 19, column 9 to column 10)",
  " (in 'lewontin_cohen_univariate', line 19, column 2 to column 21)",
  " (in 'lewontin_cohen_univariate', line 20, column 9 to column 10)",
  " (in 'lewontin_cohen_univariate', line 20, column 2 to column 19)",
  " (in 'lewontin_cohen_univariate', line 21, column 2 to column 9)",
  " (in 'lewontin_cohen_univariate', line 22, column 2 to column 9)",
  " (in 'lewontin_cohen_univariate', line 24, column 2 to column 21)",
  " (in 'lewontin_cohen_univariate', line 25, column 2 to column 24)",
  " (in 'lewontin_cohen_univariate', line 26, column 2 to column 24)",
  " (in 'lewontin_cohen_univariate', line 27, column 2 to column 20)",
  " (in 'lewontin_cohen_univariate', line 28, column 2 to column 21)",
  " (in 'lewontin_cohen_univariate', line 32, column 6 to column 24)",
  " (in 'lewontin_cohen_univariate', line 36, column 8 to column 27)",
  " (in 'lewontin_cohen_univariate', line 35, column 13 to line 37, column 7)",
  " (in 'lewontin_cohen_univariate', line 34, column 8 to column 27)",
  " (in 'lewontin_cohen_univariate', line 33, column 17 to line 35, column 7)",
  " (in 'lewontin_cohen_univariate', line 33, column 6 to line 37, column 7)",
  " (in 'lewontin_cohen_univariate', line 38, column 6 to column 29)",
  " (in 'lewontin_cohen_univariate', line 31, column 17 to line 39, column 5)",
  " (in 'lewontin_cohen_univariate', line 31, column 4 to line 39, column 5)",
  " (in 'lewontin_cohen_univariate', line 40, column 4 to column 31)",
  " (in 'lewontin_cohen_univariate', line 30, column 15 to line 41, column 3)",
  " (in 'lewontin_cohen_univariate', line 30, column 2 to line 41, column 3)",
  " (in 'lewontin_cohen_univariate', line 42, column 2 to column 46)",
  " (in 'lewontin_cohen_univariate', line 2, column 2 to column 8)",
  " (in 'lewontin_cohen_univariate', line 3, column 2 to column 8)",
  " (in 'lewontin_cohen_univariate', line 4, column 8 to column 9)",
  " (in 'lewontin_cohen_univariate', line 4, column 2 to column 36)",
  " (in 'lewontin_cohen_univariate', line 5, column 8 to column 9)",
  " (in 'lewontin_cohen_univariate', line 5, column 11 to column 12)",
  " (in 'lewontin_cohen_univariate', line 5, column 2 to column 22)",
  " (in 'lewontin_cohen_univariate', line 45, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_lewontin_cohen_univariate final : public model_base_crtp<model_lewontin_cohen_univariate> {
private:
  int N;
  int M;
  std::vector<int> occ;
  std::vector<std::vector<double>> ts;
public:
  ~model_lewontin_cohen_univariate() {}
  model_lewontin_cohen_univariate(stan::io::var_context& context__,
                                  unsigned int random_seed__ = 0,
                                  std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_lewontin_cohen_univariate_namespace::model_lewontin_cohen_univariate";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 51;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 51;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 52;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 52;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 53;
      stan::math::validate_non_negative_index("occ", "N", N);
      current_statement__ = 54;
      context__.validate_dims("data initialization", "occ", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      occ = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 54;
      occ = context__.vals_i("occ");
      current_statement__ = 54;
      stan::math::check_greater_or_equal(function__, "occ", occ, 0);
      current_statement__ = 54;
      stan::math::check_less_or_equal(function__, "occ", occ, 1);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("ts", "N", N);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("ts", "M", M);
      current_statement__ = 57;
      context__.validate_dims("data initialization", "ts", "double",
        std::vector<size_t>{static_cast<size_t>(N), static_cast<size_t>(M)});
      ts = std::vector<std::vector<double>>(N,
             std::vector<double>(M, std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> ts_flat__;
        current_statement__ = 57;
        ts_flat__ = context__.vals_r("ts");
        current_statement__ = 57;
        pos__ = 1;
        current_statement__ = 57;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 57;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 57;
            stan::model::assign(ts, ts_flat__[(pos__ - 1)],
              "assigning variable ts", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 57;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 58;
      stan::math::validate_non_negative_index("log_lik", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_lewontin_cohen_univariate";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_lewontin_cohen_univariate_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 1;
      mu = in__.template read<local_scalar_t__>();
      local_scalar_t__ sigl = DUMMY_VAR__;
      current_statement__ = 2;
      sigl = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ sigr = DUMMY_VAR__;
      current_statement__ = 3;
      sigr = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      local_scalar_t__ c = DUMMY_VAR__;
      current_statement__ = 4;
      c = in__.template read<local_scalar_t__>();
      local_scalar_t__ pd = DUMMY_VAR__;
      current_statement__ = 5;
      pd = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
             1, lp__);
      {
        current_statement__ = 27;
        stan::math::validate_non_negative_index("response", "M", M);
        Eigen::Matrix<local_scalar_t__,-1,1> response =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
        current_statement__ = 29;
        stan::math::validate_non_negative_index("loglam", "N", N);
        Eigen::Matrix<local_scalar_t__,-1,1> loglam =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
        local_scalar_t__ u = DUMMY_VAR__;
        local_scalar_t__ v = DUMMY_VAR__;
        current_statement__ = 33;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(mu, 0, 10));
        current_statement__ = 34;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(sigl, 1));
        current_statement__ = 35;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(sigr, 1));
        current_statement__ = 36;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(c, 0, 10));
        current_statement__ = 37;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(pd, 0, 1));
        current_statement__ = 49;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 46;
          for (int j = 1; j <= M; ++j) {
            current_statement__ = 38;
            u = (stan::model::rvalue(ts, "ts", stan::model::index_uni(i),
                   stan::model::index_uni(j))
              - mu);
            current_statement__ = 43;
            if (stan::math::logical_lt(u, 0)) {
              current_statement__ = 41;
              v = stan::math::pow((u / sigl), 2);
            } else {
              current_statement__ = 39;
              v = stan::math::pow((u / sigr), 2);
            }
            current_statement__ = 44;
            stan::model::assign(response, (-0.5 * v),
              "assigning variable response", stan::model::index_uni(j));
          }
          current_statement__ = 47;
          stan::model::assign(loglam, stan::math::mean(response),
            "assigning variable loglam", stan::model::index_uni(i));
        }
        current_statement__ = 50;
        lp_accum__.add(stan::math::bernoulli_lpmf<propto__>(occ,
                         stan::math::multiply(pd,
                           stan::math::inv_logit(
                             stan::math::subtract(loglam, c)))));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_lewontin_cohen_univariate_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double mu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      mu = in__.template read<local_scalar_t__>();
      double sigl = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      sigl = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double sigr = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      sigr = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
               lp__);
      double c = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      c = in__.template read<local_scalar_t__>();
      double pd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      pd = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
             1, lp__);
      out__.write(mu);
      out__.write(sigl);
      out__.write(sigr);
      out__.write(c);
      out__.write(pd);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      {
        current_statement__ = 7;
        stan::math::validate_non_negative_index("response", "M", M);
        Eigen::Matrix<double,-1,1> response =
          Eigen::Matrix<double,-1,1>::Constant(M,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 9;
        stan::math::validate_non_negative_index("loglam", "N", N);
        Eigen::Matrix<double,-1,1> loglam =
          Eigen::Matrix<double,-1,1>::Constant(N,
            std::numeric_limits<double>::quiet_NaN());
        double u = std::numeric_limits<double>::quiet_NaN();
        double v = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 25;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 21;
          for (int j = 1; j <= M; ++j) {
            current_statement__ = 13;
            u = (stan::model::rvalue(ts, "ts", stan::model::index_uni(i),
                   stan::model::index_uni(j))
              - mu);
            current_statement__ = 18;
            if (stan::math::logical_lt(u, 0)) {
              current_statement__ = 16;
              v = stan::math::pow((u / sigl), 2);
            } else {
              current_statement__ = 14;
              v = stan::math::pow((u / sigr), 2);
            }
            current_statement__ = 19;
            stan::model::assign(response, (-0.5 * v),
              "assigning variable response", stan::model::index_uni(j));
          }
          current_statement__ = 22;
          stan::model::assign(loglam, stan::math::mean(response),
            "assigning variable loglam", stan::model::index_uni(i));
          current_statement__ = 23;
          stan::model::assign(log_lik,
            stan::math::bernoulli_lpmf<false>(
              stan::model::rvalue(occ, "occ", stan::model::index_uni(i)), (pd
              *
              stan::math::inv_logit(
                (stan::model::rvalue(loglam, "loglam",
                   stan::model::index_uni(i)) - c)))),
            "assigning variable log_lik", stan::model::index_uni(i));
        }
      }
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 1;
      mu = in__.read<local_scalar_t__>();
      out__.write(mu);
      local_scalar_t__ sigl = DUMMY_VAR__;
      current_statement__ = 2;
      sigl = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigl);
      local_scalar_t__ sigr = DUMMY_VAR__;
      current_statement__ = 3;
      sigr = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigr);
      local_scalar_t__ c = DUMMY_VAR__;
      current_statement__ = 4;
      c = in__.read<local_scalar_t__>();
      out__.write(c);
      local_scalar_t__ pd = DUMMY_VAR__;
      current_statement__ = 5;
      pd = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, pd);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "mu", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "sigl", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "sigr", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "c", "double",
        std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "pd", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ mu = DUMMY_VAR__;
      current_statement__ = 1;
      mu = context__.vals_r("mu")[(1 - 1)];
      out__.write(mu);
      local_scalar_t__ sigl = DUMMY_VAR__;
      current_statement__ = 2;
      sigl = context__.vals_r("sigl")[(1 - 1)];
      out__.write_free_lb(0, sigl);
      local_scalar_t__ sigr = DUMMY_VAR__;
      current_statement__ = 3;
      sigr = context__.vals_r("sigr")[(1 - 1)];
      out__.write_free_lb(0, sigr);
      local_scalar_t__ c = DUMMY_VAR__;
      current_statement__ = 4;
      c = context__.vals_r("c")[(1 - 1)];
      out__.write(c);
      local_scalar_t__ pd = DUMMY_VAR__;
      current_statement__ = 5;
      pd = context__.vals_r("pd")[(1 - 1)];
      out__.write_free_lub(0, 1, pd);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"mu", "sigl", "sigr", "c", "pd"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "sigl");
    param_names__.emplace_back(std::string() + "sigr");
    param_names__.emplace_back(std::string() + "c");
    param_names__.emplace_back(std::string() + "pd");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "mu");
    param_names__.emplace_back(std::string() + "sigl");
    param_names__.emplace_back(std::string() + "sigr");
    param_names__.emplace_back(std::string() + "c");
    param_names__.emplace_back(std::string() + "pd");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigl\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigr\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigl\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigr\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"pd\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((1 + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((1 + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (N);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_lewontin_cohen_univariate_namespace::model_lewontin_cohen_univariate;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_lewontin_cohen_univariate_namespace::profiles__;
}
#endif
#endif
